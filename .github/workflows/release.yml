name: 'Release new version'

on:
  push:
    tags:
      - 'v*'

jobs:
  check-release:
    name: Check Release
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout 🛎
        id: checkout
        uses: actions/checkout@master

      - name: Wait for other checks to succeed
        uses: lewagon/wait-on-check-action@v1.1.2
        with:
          ref: ${{ github.ref }}
          running-workflow-name: 'Check Release'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

      - name: Setup node env 🏗
        id: setup
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'

      - name: Get yarn cache directory path 🔃
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules 📦
        uses: actions/cache@v3.0.7
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies 👨🏻‍💻
        id: install
        run: yarn install --frozen-lockfile

      - name: Publish to npm 📩
        id: npm-publish
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}
          dry-run: true
          check-version: true

      - if: steps.npm-publish.outputs.type == 'none'
        name: Check new version
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('No new version in package.json detected')

  create-release:
    name: Create Release
    needs: check-release
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout 🛎
        id: checkout
        uses: actions/checkout@master

      - name: Setup node env 🏗
        id: setup
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'

      - name: Get yarn cache directory path 🔃
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules 📦
        uses: actions/cache@v3.0.7
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies 👨🏻‍💻
        id: install
        run: yarn install --frozen-lockfile

      - name: Build 🛠
        id: build
        run: yarn build

      - name: Create Draft Release
        id: create-draft-release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            ./dist/module.js
            ./dist/module.d.ts
